<html>
    <head>
        <!-- <link rel="stylesheet" href="MyCart.css"> -->
        <script src='https://cdn.socket.io/socket.io-2.3.0.js'></script>
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
        <!-- <script src='/MyCart.js'></script> -->
    </head>
    <body>
        <h1>
            <div style='background-color: green; text-align: center; color: white'>
                ACME Inc.
            </div>
        </h1>
        <!-- <input type="button" onclick="CreateTableFromJSON()" value="Create Table From JSON" /> -->
        <p id="showData">
            <input type="button" onclick="sendCompositeRequest()" value="Buy Now">
        </p>
    </body>
    
    <script>
        $("#showData").hide();
        var test = '<%- JSON.stringify(sampleJsonData) %>'
        console.log('test', JSON.parse(test))
        test = JSON.parse(test)
        let accessToken = test.access_token || '00D7F000001wtp7!ARUAQHilmhNQMDoCTCMMxZFYFdbCQpB3cM0Mus6MS4KTo459eXoCsFsl6bkx1QInxAaDM8rqVi5RED7Wfr4stFxX5wzAXURo';
        let instanceUrl = test.instance_url || 'https://mybatcave-dev-ed.my.salesforce.com'
        let socketId;
        let orderId
        let myBooks = []

        const socket = io();

        psuedoData = {}

        socket.on('broadcast', (data) => {
            console.log('server replied WITH' + JSON.stringify(data));
            psuedoData = data.cartdata
            orderId = data.orderId

            let validParameters = ['Name', 'ProductCode', 'quantity', 'price', 'PricebookEntries']

            let myNewBooks = psuedoData
            myBooks = []
            myNewBooks.forEach(el => {
                temp = {}
                validParameters.forEach(e => {
                    temp[e] = el[e]
                })
                myBooks.push(temp)
            })
            CreateTableFromJSON();

        });
        socket.on('connect', () => {
            //get the id from socket
            console.log(socket.id);
            socketId = socket.id

            let loginInfo = {
                socketId: socketId, 
                accessToken: accessToken, 
                instanceUrl: instanceUrl
            }
            socket.emit('login_success', loginInfo)
            console.log('loginInfo', loginInfo)
        });

        function CreateTableFromJSON() {
            var col = [];
            for (var i = 0; i < myBooks.length; i++) {
                for (var key in myBooks[i]) {
                    if (col.indexOf(key) === -1) {
                        col.push(key);
                    }
                }
            }

            // CREATE DYNAMIC TABLE.
            var table = document.createElement("table");

            // CREATE HTML TABLE HEADER ROW USING THE EXTRACTED HEADERS ABOVE.

            var tr = table.insertRow(-1);                   // TABLE ROW.

            for (var i = 0; i < col.length; i++) {
                var th = document.createElement("th");      // TABLE HEADER.
                th.innerHTML = col[i];
                tr.appendChild(th);
            }

            // ADD JSON DATA TO THE TABLE AS ROWS.
            for (var i = 0; i < myBooks.length; i++) {

                tr = table.insertRow(-1);

                for (var j = 0; j < col.length; j++) {
                    var tabCell = tr.insertCell(-1);
                    tabCell.innerHTML = myBooks[i][col[j]];
                }
            }

            // FINALLY ADD THE NEWLY CREATED TABLE WITH JSON DATA TO A CONTAINER.
            var divContainer = document.getElementById("showData");
            divContainer.innerHTML = "<input type='button' onclick='sendCompositeRequest()'' value='Buy Now'>";
            divContainer.appendChild(table);
            
            $("#showData").slideDown("slow", "swing");
        }

        function sendCompositeRequest() {
            let data = {
                instanceUrl: instanceUrl,
                accessToken: accessToken,
                socketId: socketId,
                sObjects: []
            }

            data.sObjects = psuedoData.map(el => {
                return {
                    mode: 'insert',
                    sobject: 'OrderItem',
                    record: {
                        "Quantity": el.quantity,
                        "Product2Id": el.Product2Id,
                        "OrderId":orderId,
                        "PricebookEntryId": el.PricebookEntries[0].Id,
                        "UnitPrice": el.price
                    }
                }
            })

            // socket.emit('performDML', data)
            data.sObjects.push(
                {
                    mode: 'update',
                    sobject: 'Order',
                    record:{
                        Id: orderId, 
                        Status: 'Ordered By Customers'
                    }
                }
            )

            socket.emit('performDML', data)

        }
    </script>

    <style>
                
        table {
            font-family: arial, sans-serif;
            border-collapse: collapse;
            width: 100%;
          }
          
          td, th {
            border: 1px solid #dddddd;
            text-align: left;
            padding: 8px;
          }
          
          tr:nth-child(even) {
            background-color: #dddddd;
          }
        
        #loginButton{
            background-color: #009EDB;
            border: none;
            color: white;
            padding: 15px 32px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 16px;
        }
    
    </style>
</html>